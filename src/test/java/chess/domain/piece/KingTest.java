package chess.domain.piece;

import static chess.domain.pixture.PieceFixture.BLACK_QUEEN;
import static chess.domain.pixture.PieceFixture.WHITE_KING;
import static org.assertj.core.api.Assertions.assertThat;

import chess.domain.position.Position;
import java.util.Map;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class KingTest {
    /*
     * ........
     * ........
     * ........
     * ..EEE...
     * ..EkE...
     * ..EEE...
     * ........
     * ........
     * */
    @ParameterizedTest
    @CsvSource({"3,3", "5,5",
            "3,5",
            "5,4", "3,4",
            "4,3", "4,5",})
    @DisplayName("킹은 도착 위치가 비어있는 경우 이동할 수 있다.")
    void canMoveWhenTargetIsEmpty(int file, int rank) {
        assertThat(WHITE_KING.getPiece().canMove(Position.of(4, 4), Position.of(file, rank), Map.of())).isTrue();
    }

    /*
     * ........
     * ........
     * ........
     * ..QQQ...
     * ..QkQ...
     * ..QQQ...
     * ........
     * ........
     * */
    @ParameterizedTest
    @CsvSource({"3,3", "5,5",
            "3,5", "5,3",
            "5,4", "3,4",
            "4,3", "4,5",})
    @DisplayName("킹은 도착 위치에 상대편 말이 있는 경우 이동할 수 있다.")
    void canMoveWhenTargetIsOtherColor(int file, int rank) {
        assertThat(WHITE_KING.getPiece().canMove(Position.of(4, 4), Position.of(file, rank),
                Map.of(Position.of(file, rank), BLACK_QUEEN.getPiece()))).isTrue();
    }

    /*
     * ........
     * ........
     * ........
     * ..qqq...
     * ..qkq...
     * ..qqq...
     * ........
     * ........
     * */
    @ParameterizedTest
    @CsvSource({"3,3", "5,5",
            "3,5", "5,3",
            "5,4", "3,4",
            "4,3", "4,5",})
    @DisplayName("킹은 도착 위치에 우리편 말이 있는 경우 이동할 수 없다.")
    void canNotMoveWhenTargetIsSameColor(int rank, int file) {
        Position source = Position.of(4, 4);
        Position target = Position.of(file, rank);
        assertThat(WHITE_KING.getPiece().canMove(source, target,
                Map.of(source, WHITE_KING.getPiece(),
                        target, new Queen(Color.WHITE)))).isFalse();
    }
}
